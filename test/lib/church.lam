let tru = λt. λf. t
let fls = λt. λf. f
let c0 = λs. λz. z
let c1 = λs. λz. s z
let c2 = λs. λz. s (s z)

let fix = λf. (λx. f (λy. x x y)) (λx. f (λy. x x y))

let pair = λf. λs. λb. b f s
let fst = λp. p tru
let snd = λp. p fls

let and = λb. λc. b c fls
let or = λb. λc. b tru c
let not = λb. b fls tru
let xor = λa. λb. a (not b) b

let iszro = λm. m (λx. fls) tru
let equal = λm. λn.
                and (iszro (m prd n))
                    (iszro (n prd m))
let scc = λn. λs. λz. s (n s z)
let prd = λm. fst (m (λp. pair (snd p) (plus c1 (snd p))) (pair c0 c0))
let plus = λm. λn. λs. λz. m s (n s z)
let times = λm. λn. m (plus n) c0

let realeq = λm. λn. (equal m n) @true @false
let realbool = λb. b @true @false
let churchbool = λb. @if b @then tru @else fls
let realnat = λm. m (λx. @succ x) 0
let churchnat = fix (λf. λm. @if @iszero m @then c0 @else scc (f (@pred m)))

let nil = λc. λn. n
let cons = λh. λt. λc. λn. c h (t c n)
let head = λl. l (λh. λt. h) fls
let tail = λl. fst (l (λh. λt. pair fls (cons h t)) (pair tru nil))
