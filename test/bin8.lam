@include "lib/church.lam"

# 8-bit accessors
let b0Bin8 = \n. n (\b7. \b6. \b5. \b4. \b3. \b2. \b1. \b0. b0)
let b1Bin8 = \n. n (\b7. \b6. \b5. \b4. \b3. \b2. \b1. \b0. b1)
let b2Bin8 = \n. n (\b7. \b6. \b5. \b4. \b3. \b2. \b1. \b0. b2)
let b3Bin8 = \n. n (\b7. \b6. \b5. \b4. \b3. \b2. \b1. \b0. b3)
let b4Bin8 = \n. n (\b7. \b6. \b5. \b4. \b3. \b2. \b1. \b0. b4)
let b5Bin8 = \n. n (\b7. \b6. \b5. \b4. \b3. \b2. \b1. \b0. b5)
let b6Bin8 = \n. n (\b7. \b6. \b5. \b4. \b3. \b2. \b1. \b0. b6)
let b7Bin8 = \n. n (\b7. \b6. \b5. \b4. \b3. \b2. \b1. \b0. b7)

# 8-bit Carry Lookahead Full Adder
let cla8 = \A. \B. \C0.
    let A0 = b0Bin8 A in
    let A1 = b1Bin8 A in
    let A2 = b2Bin8 A in
    let A3 = b3Bin8 A in
    let A4 = b4Bin8 A in
    let A5 = b5Bin8 A in
    let A6 = b6Bin8 A in
    let A7 = b7Bin8 A in
    let B0 = b0Bin8 B in
    let B1 = b1Bin8 B in
    let B2 = b2Bin8 B in
    let B3 = b3Bin8 B in
    let B4 = b4Bin8 B in
    let B5 = b5Bin8 B in
    let B6 = b6Bin8 B in
    let B7 = b7Bin8 B in
    let P0 = xor A0 B0 in
    let P1 = xor A1 B1 in
    let P2 = xor A2 B2 in
    let P3 = xor A3 B3 in
    let P4 = xor A4 B4 in
    let P5 = xor A5 B5 in
    let P6 = xor A6 B6 in
    let P7 = xor A7 B7 in
    let G0 = and A0 B0 in
    let G1 = and A1 B1 in
    let G2 = and A2 B2 in
    let G3 = and A3 B3 in
    let G4 = and A4 B4 in
    let G5 = and A5 B5 in
    let G6 = and A6 B6 in
    let G7 = and A7 B7 in
    let C1 = or G0 (and P0 C0) in
    let C2 = or G1 (and P1 C1) in
    let C3 = or G2 (and P2 C2) in
    let C4 = or G3 (and P3 C3) in
    let C5 = or G4 (and P4 C4) in
    let C6 = or G5 (and P5 C5) in
    let C7 = or G6 (and P6 C6) in
    let C8 = or G7 (and P7 C7) in
    let S0 = xor P0 C0 in
    let S1 = xor P1 C1 in
    let S2 = xor P2 C2 in
    let S3 = xor P3 C3 in
    let S4 = xor P4 C4 in
    let S5 = xor P5 C5 in
    let S6 = xor P6 C6 in
    let S7 = xor P7 C7 in
    let sum = \f. f S7 S6 S5 S4 S3 S2 S1 S0 in
    pair sum C8

let bitToChurchNat = \b. b c1 c0

let bit8ToChurchNat = \N.
    let N0 = b0Bin8 N in
    let N1 = b1Bin8 N in
    let N2 = b2Bin8 N in
    let N3 = b3Bin8 N in
    let N4 = b4Bin8 N in
    let N5 = b5Bin8 N in
    let N6 = b6Bin8 N in
    let N7 = b7Bin8 N in
    let n0 = bitToChurchNat N0 in
    let n1 = times c2 (bitToChurchNat N1) in
    let n2 = times (times c2 c2) (bitToChurchNat N2) in
    let n3 = times (times c2 (times c2 c2)) (bitToChurchNat N3) in
    let n4 = times (times c2 (times c2 (times c2 c2))) (bitToChurchNat N4) in
    let n5 = times (times c2 (times c2 (times c2 (times c2 c2)))) (bitToChurchNat N5) in
    let n6 = times (times c2 (times c2 (times c2 (times c2 (times c2 c2))))) (bitToChurchNat N6) in
    let n7 = times (times c2 (times c2 (times c2 (times c2 (times c2 (times c2 c2)))))) (bitToChurchNat N7) in
    plus n0 (plus n1 (plus n2 (plus n3 (plus n4 (plus n5 (plus n6 n7))))))

let dispBit = \b. realnat (bitToChurchNat b)

let disp8 = \N.
    let N0 = b0Bin8 N in
    let N1 = b1Bin8 N in
    let N2 = b2Bin8 N in
    let N3 = b3Bin8 N in
    let N4 = b4Bin8 N in
    let N5 = b5Bin8 N in
    let N6 = b6Bin8 N in
    let N7 = b7Bin8 N in
    (dispBit N7, dispBit N6, dispBit N5, dispBit N4,
     dispBit N3, dispBit N2, dispBit N1, dispBit N0)

let natToBit = \n. (churchbool (@iszero n)) fls tru

let natsToBin8 = \b7. \b6. \b5. \b4. \b3. \b2. \b1. \b0.
    \f. f (natToBit b7) (natToBit b6) (natToBit b5) (natToBit b4)
          (natToBit b3) (natToBit b2) (natToBit b1) (natToBit b0)

@eval
let A = natsToBin8 1 0 0 1 0 1 0 1 in
let B = natsToBin8 0 1 0 1 0 1 1 0 in
let C0 = natToBit 0 in
let result = cla8 A B C0 in
let sum = fst result in
let carry = snd result in
@print "149 (10010101) + 86 (01010110) = ";
@print (realnat (bit8ToChurchNat sum));
@print ", binary: ";
@print (disp8 sum);
@print ", carry = ";
@println (dispBit carry)
